#!/usr/bin/env bash
# Usage: gh orgtools <COMMAND> [OPTIONS]
#
# NAME
#   gh orgtools -- GitHub CLI extension to help work with your organization
#
# SYNOPSIS
#   gh orgtools <COMMAND> [OPTIONS]
#
# DESCRIPTION
#   FIXME
#
# COMMANDS
#   help                   - prints documentation gh-orgtools and its commands
#   repo-list              - list an organizations repositories
#   repo-create            - create a new repository in the organization
#   repo-grant-team-access - grant an organization team access to the given repoitories
#   user-list              - list users in the organization
#   user-invite            - invite users to join the organization
#   user-remove            - remove users from the organization
#   user-get               - get information about the given user
#   team-list              - list the organization's teams
#   team-get               - get information about the given team
#
# GLOBAL OPTIONS
#   -V, --version
#     Print version information.
#
#   -h, --help
#     Show help text for the main gh-orgtools command.
#
# REPORTING BUGS
#   Issues can be reported on GitHub:
#
#   https://github.com/a2hosting/gh-orgtools/issues
#
# LICENSE
#   MIT License
#
# SEE ALSO
#   gh(1)

# Enable debug mode
if [[ "$DEBUG" ]]; then
  export PS4='+ [${BASH_SOURCE##*/}:$LINENO] '
  set -x
fi

set -euo pipefail

# gh-orgtools version
VERSION="0.0.1"

# Prints the given message to STDERR
#
# $1 - Message
_warn() {
  echo "${1:-}" >&2
}

# Prints the given message to STDERR and exits non zero.
#
# $1 - Message
_abort() {
  _warn "$(_program_name): $1"
  exit 1
}

# Pretty prints the current program name, eg: "gh orgtools"
_program_name() {
  printf "%s\\n" "${0//*\/gh-/gh }"
}

# Formats help text supplied on STDIN. If this script is being
# piped/redirected, no special formatting is done.
_format_help() {
  if [[ -t 1 ]]; then
    sed -E "s/^([A-Z0-9][A-Z0-9 ]+)\$/$(tput bold)\\1$(tput sgr0)/"
  else
    cat
  fi
}

# Formats GitHub API output.
#
# $1 - format (plain, tsv, csv, or json)
_format_output() {
  local format="$1"

  case "$format" in
    plain)
      column -t -s$'\t'
      ;;
    *)
      cat
      ;;
  esac
}

# Run `gh` commands, checking first if the tool is installed.
#
# $@ - args to pass to `gh`
_gh() {
  if ! type gh &> /dev/null; then
    _warn "error: \`gh' not found. Install from https://cli.github.com"
    return 127
  fi

  gh "$@"
}

# Main program
main() {
  local cmd="${1:-}"
  shift

  case "$cmd" in
    repo-list|user-list|user-invite|user-remove)
      "$cmd" "$@"
      return $?
      ;;
    -V | --version | version)
      echo "$(_program_name) v$VERSION"
      echo "https://github.com/a2hosting/gh-orgtools"
      return 0
      ;;
    -h | --help | help)
      help "${1:-}" "$([[ "$cmd" == "-h" ]] && echo 1)"
      return 0
      ;;
    -?*)
      _warn "$(_program_name): invalid option \`$cmd'"
      return 1
      ;;
    *)
      _warn "$(_program_name): invalid command \`$cmd'"
      return 1
      ;;
  esac
}

# Usage: gh orgtools help [COMMAND]
#
# NAME
#   gh orgtools help - prints documentation for gh-orgtools and its commands
#
# SYNOPSIS
#   gh orgtools help [COMMAND]
#
# DESCRIPTION
#   Prints documentation for gh-orgtools commands.
help() {
  local cmd="$1" usage="${2:-}" pattern

  pattern="^# Usage: $(_program_name)"

  if [[ "$cmd" == "-h" ]]; then
    cmd=
    usage=1
  elif [[ "$cmd" == "--help" ]]; then
    cmd=help
    usage=
  fi

  [[ "$cmd" ]] && pattern="$pattern $cmd"

  if ! grep -E -q "$pattern( |$)" "$0"; then
    _warn "$(_program_name) help: command \`$cmd' not found!"
    return 1
  fi

  awk \
    -v cmd="$cmd" \
    -v usage="$usage" \
    -v pattern="$pattern" \
    '
    $0 ~ pattern,/^[^#]/ {
      if ($1 == "#") {
        sub("^# ?", "", $0)
        print
        if (usage) exit
      } else {
        exit
      }
    }
    ' "$0" | _format_help
}

# Usage: gh orgtools repo-list [--org=ORG]
#
# NAME
#   gh orgtools repo-list -- list repos in the organization
#
# SYNOPSIS
#   gh orgtools repo-list
#
# DESCRIPTION
#   Lists the organization's repositories.
#
# OPTIONS
#   --org=ORG
#     Organization name. Required.
#
#   --format=FORMAT
#     Output format, one of plain, tsv, csv, or json. Default: plain.
#
# SEE ALSO
#   https://docs.github.com/en/rest/reference/repos#list-organization-repositories
repo-list() {
  local org query output=() format=plain

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      --org=*)
        org="${1#*=}"
        shift
        ;;
      --format=*)
        format="${1#*=}"
        shift
        ;;
      -?*)
        _warn "$(_program_name) ${FUNCNAME[0]}: invalid option \`$1'"
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ -z "${org-}" ]]; then
    _warn "error: must specify --org"
    return 1
  fi

  output+=("name")

  query='.[].name'

  while read -r line; do
    output+=("$line")
  done < <(_gh api --paginate --jq "$query" "orgs/$org/repos")

  {
    printf "%s\n" "${output[@]}"
    echo
  } | _format_output "$format"
}

# Usage: gh orgtools user-list [--org=ORG]
#
# NAME
#   gh orgtools user-list -- list users in the organization
#
# SYNOPSIS
#   gh orgtools user-list
#
# DESCRIPTION
#   Lists the organization's users.
#
# OPTIONS
#   --org=ORG
#     Organization name. Required.
#
#   --names
#     Fetch real names as well. This will use an API call per user in your
#     organization.
#
#   --format=FORMAT
#     Output format, one of plain, tsv, csv, or json. Default: plain.
#
# SEE ALSO
#   https://docs.github.com/en/rest/reference/orgs#list-organization-members
user-list() {
  local org query line name names=no format=plain output=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      --org=*)
        org="${1#*=}"
        shift
        ;;
      --format=*)
        format="${1#*=}"
        shift
        ;;
      --names)
        names=yes
        shift
        ;;
      -?*)
        _warn "$(_program_name) ${FUNCNAME[0]}: invalid option \`$1'"
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ -z "${org-}" ]]; then
    _warn "error: must specify --org"
    return 1
  fi

  query=".[].login"

  if [[ "${names:-no}" = "yes" ]]; then
    output+=("username"$'\t'"name")
  else
    output+=("username")
  fi

  # Loop through each user and fetch their name too
  while read -r line; do
    if [[ "${names:-no}" = "yes" ]]; then
      name=$(_gh api --jq ".name // \"(No Name)\"" "users/$line")

      output+=("$line"$'\t'"$name")
    else
      output+=("$line")
    fi
  done < <(_gh api --paginate --jq "$query" "orgs/$org/members")

  {
    printf "%s\n" "${output[@]}"
    echo
  } | _format_output "$format"
}

# Usage: gh orgtools user-invite [--org=ORG] <EMAIL>
#
# NAME
#   gh orgtools user-invite --
#
# SYNOPSIS
#   gh orgtools user-invite [--org=ORG] <EMAIL>
#
# DESCRIPTION
#   Invite users to join the organization.
#
# OPTIONS
#   --org=ORG
#     Organization name. Required.
#
#   --role=ROLE
#     Role for new member. Default "direct_member". Options are:
#       * admin
#         Organization owners with full administrative rights to the
#         organization and complete access to all repositories and teams.
#       * direct_member
#         Non-owner organization members with ability to see other members and
#         join teams by invitation.
#       * billing_manager
#         Non-owner organization members with ability to manage the billing
#         settings of your organization.
#
#   --team-ids=ID1[,ID2...]
#     One or more Team IDs to add the user to. Use `gh orgtools team-list` or
#     `gh orgtools team-get` to get team IDs.
#
# SEE ALSO
#   https://docs.github.com/en/rest/reference/orgs#create-an-organization-invitation
user-invite() {
  local org query role=direct_member team_ids line api_args=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      --org=*)
        org="${1#*=}"
        shift
        ;;
      --role=*)
        role="${1#*=}"
        shift
        ;;
      --team-ids=*)
        team_ids="${1#*=}"
        shift
        ;;
      -?*)
        _warn "$(_program_name) ${FUNCNAME[0]}: invalid option \`$1'"
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ -z "${org-}" ]]; then
    _warn "error: must specify --org"
    return 1
  fi

  api_args+=("-X POST")

  if [[ $# -ne 1 ]]; then
    _warn "must specify one email address"
    return 1
  fi

  api_args+=("-f \"email=$1\"")

  if [[ "${role_id-}" ]]; then
    api_args+=("-f \"role=$role\"")
  fi

  if [[ "${team_ids-}" ]]; then
    while read -r line; do
      api_args+=("-f \"team_id[]=$line\"")
    done < <(tr ',' $'\n' <<< "$team_ids")
  fi

  echo _gh api -X POST "${api_args[@]}" "orgs/$org/invitations"
}

# Usage: gh orgtools user-remove [--org=ORG] <USERNAME>
#
# NAME
#   gh orgtools user-remove -- remove users from the organization
#
# SYNOPSIS
#   gh orgtools user-remove [--org=ORG] <USERNAME>
#
# DESCRIPTION
#   Remove users from the organization.
#
# OPTIONS
#   --org=ORG
#     Organization name. Required.
#
# SEE ALSO
#   https://docs.github.com/en/rest/reference/orgs#remove-an-organization-member
user-remove() {
  local org user

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      --org=*)
        org="${1#*=}"
        shift
        ;;
      -?*)
        _warn "$(_program_name) ${FUNCNAME[0]}: invalid option \`$1'"
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ -z "${org-}" ]]; then
    _warn "error: must specify --org"
    return 1
  fi

  if [[ $# -ne 1 ]]; then
    _warn "must specify username"
    return 1
  fi

  user="$1"

  echo _gh api -X DELETE "orgs/$org/members/$user"
}

# If no arg was passed, show the help text
main "${@:-help}"
