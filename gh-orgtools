#!/usr/bin/env bash
# Usage: gh orgtools <command> [options]
#
# NAME
#   gh orgtools -- GitHub CLI extension to help work with your organization
#
# SYNOPSIS
#   gh orgtools <command> [options]
#
# DESCRIPTION
#   FIXME
#
# OPTIONS
#   FIXME
#
# SEE ALSO
#   FIXME

# Enable debug mode
if [[ "$DEBUG" ]]; then
  export PS4='+ [${BASH_SOURCE##*/}:$LINENO] '
  set -x
fi

set -euo pipefail

# gh-orgtools version
VERSION="0.0.1"

# Prints the given message to STDERR
#
# $1 - Message
_warn() {
  echo "${1:-}" >&2
}

# Prints the given message to STDERR and exits non zero.
#
# $1 - Message
_abort() {
  _warn "$(_program_name): $1"
  exit 1
}

# Pretty prints the current program name, eg: "gh orgtools"
_program_name() {
  printf "%s\\n" "${0//*\/gh-/gh }"
}

# Formats help text supplied on STDIN. If this script is being
# piped/redirected, no special formatting is done.
_format_help() {
  if [[ -t 1 ]]; then
    sed -E "s/^([A-Z0-9][A-Z0-9 ]+)\$/$(tput bold)\\1$(tput sgr0)/"
  else
    cat
  fi
}

# Main program
main() {
  local cmd="${1:-}"
  shift

  case "$cmd" in
    -V | --version | version)
      echo "$(_program_name) v$VERSION"
      echo "https://github.com/a2hosting/gh-orgtools"
      return 0
      ;;
    -h | --help | help)
      help "${1:-}" "$([[ "$cmd" == "-h" ]] && echo 1)"
      return 0
      ;;
    -?*)
      warn "$(_program_name): invalid option \`$cmd'"
      return 1
      ;;
    *)
      warn "$(_program_name): invalid command \`$cmd'"
      return 1
      ;;
  esac
}

# Usage: gh orgtools help [COMMAND]
#
# NAME
#   gh orgtools help - show help for gh-orgtools and its commands
#
# SYNOPSIS
#   gh orgtools help [COMMAND]
#
# DESCRIPTION
#   Prints documentation for gh-orgtools commands.
help() {
  local cmd="$1" usage="${2:-}" pattern

  pattern="^# Usage: $(_program_name)"

  if [[ "$cmd" == "-h" ]]; then
    cmd=
    usage=1
  elif [[ "$cmd" == "--help" ]]; then
    cmd=help
    usage=
  fi

  [[ "$cmd" ]] && pattern="$pattern $cmd"

  if ! grep -E -q "$pattern( |$)" "$0"; then
    _warn "$(_program_name) help: command \`$cmd' not found!"
    return 1
  fi

  awk \
    -v cmd="$cmd" \
    -v usage="$usage" \
    -v pattern="$pattern" \
    '
    $0 ~ pattern,/^[^#]/ {
      if ($1 == "#") {
        sub("^# ?", "", $0)
        print
        if (usage) exit
      } else {
        exit
      }
    }
    ' "$0" | _format_help
}

# If no arg was passed, show the help text
main "${@:-help}"
